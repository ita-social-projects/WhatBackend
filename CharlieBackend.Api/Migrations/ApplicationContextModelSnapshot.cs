// <auto-generated />
using System;
using CharlieBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharlieBackend.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CharlieBackend.Core.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvatarId")
                        .HasColumnName("AvatarID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnName("ForgotPasswordToken")
                        .HasColumnType("VARCHAR(36)")
                        .HasComment("GUID length is 36 characters");

                    b.Property<DateTime?>("ForgotTokenGenDate")
                        .HasColumnName("ForgotTokenGenDate")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<ulong>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("BIT")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PasswordHash")
                        .HasColumnType("VARCHAR(64)")
                        .HasComment("SHA265 output size is 256 bits or 64 characters");

                    b.Property<byte>("Role")
                        .HasColumnName("Role")
                        .HasColumnType("tinyint unsigned")
                        .HasComment("Roles:0 - NotAssigned; 1 - Student, 2 - Mentor, 4 - Admin, 8 - Secretary");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnName("Salt")
                        .HasColumnType("VARCHAR(32)")
                        .HasComment("Standard salt size is 128 bits or 32 characters");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasName("UQ_AvatarAccounts");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_EmailAccounts");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnName("ContainerName")
                        .HasColumnType("VARCHAR(36)")
                        .HasComment("GUID length is 36 characters");

                    b.Property<long>("CreatedByAccountId")
                        .HasColumnName("CreatedByAccountID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FileName")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ContainerName")
                        .IsUnique()
                        .HasName("UQ_ContainerNameAttachments");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentId")
                        .HasColumnName("AttachmentID")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkId")
                        .HasColumnName("HomeworkID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("HomeworkId", "AttachmentId")
                        .IsUnique()
                        .HasName("UQ_AttachmentAndHomework");

                    b.ToTable("AttachmentsOfHomeworks");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomeworkStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentId")
                        .HasColumnName("AttachmentID")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkStudentId")
                        .HasColumnName("HomeworkFromStudentID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AttachmentId")
                        .HasName("IX_Attachment");

                    b.HasIndex("HomeworkStudentId")
                        .HasName("IX_HomeworkFromStudent");

                    b.HasIndex("AttachmentId", "HomeworkStudentId")
                        .IsUnique()
                        .HasName("UQ_HomeworkFromStudentAndAttachment");

                    b.ToTable("AttachmentsOfHomeworksFromStudents");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomeworkStudentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentId")
                        .HasColumnName("AttachmentID")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkStudentHistoryId")
                        .HasColumnName("HomeworkFromStudentHistoryID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AttachmentId")
                        .HasName("IX_AttachmentHistory");

                    b.HasIndex("HomeworkStudentHistoryId")
                        .HasName("IX_HomeworkFromStudentHistory");

                    b.HasIndex("AttachmentId", "HomeworkStudentHistoryId")
                        .IsUnique()
                        .HasName("UQ_HomeworkFromStudentAndAttachment");

                    b.ToTable("AttachmentsOfHomeworksFromStudentsHistory");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<ulong>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("BIT")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_NameCourses");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.EventOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventFinish")
                        .HasColumnName("EventFinish")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<DateTime>("EventStart")
                        .HasColumnName("EventStart")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<int>("Pattern")
                        .HasColumnName("Pattern")
                        .HasColumnType("int")
                        .HasComment("Patterns: 0 - Daily, 1 - Weekly, 2 - AbsoluteMonthly, 3 - RelativeMonthly");

                    b.Property<long>("Storage")
                        .HasColumnName("Storage")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentGroupId")
                        .HasColumnName("StudentGroupID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("EventOccurrences");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Homework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DueDate")
                        .IsRequired()
                        .HasColumnName("DueDate")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<long>("LessonId")
                        .HasColumnName("LessonID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnName("PublishingDate")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<string>("TaskText")
                        .IsRequired()
                        .HasColumnName("TaskText")
                        .HasColumnType("VARCHAR(8000)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LessonId")
                        .HasName("IX_Lesson");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.HomeworkStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkId")
                        .HasColumnName("HomeworkID")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeworkText")
                        .HasColumnName("HomeworkText")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<bool>("IsSent")
                        .HasColumnName("IsSent")
                        .HasColumnType("TINYINT(1)");

                    b.Property<long?>("MarkId")
                        .HasColumnName("MarkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnName("PublishingDate")
                        .HasColumnType("DATETIME");

                    b.Property<long>("StudentId")
                        .HasColumnName("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("HomeworkId")
                        .HasName("IX_Homework");

                    b.HasIndex("MarkId")
                        .IsUnique();

                    b.HasIndex("StudentId", "HomeworkId")
                        .IsUnique()
                        .HasName("UQ_HomeworkAndStudent");

                    b.ToTable("HomeworksFromStudents");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.HomeworkStudentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkStudentId")
                        .HasColumnName("HomeworkFromStudentID")
                        .HasColumnType("bigint");

                    b.Property<string>("HomeworkText")
                        .HasColumnName("HomeworkText")
                        .HasColumnType("VARCHAR(8000)");

                    b.Property<long>("MarkId")
                        .HasColumnName("MarkID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnName("PublishingDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("HomeworkStudentId");

                    b.HasIndex("MarkId")
                        .IsUnique();

                    b.ToTable("HomeworksFromStudentsHistory");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnName("LessonDate")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<long?>("MentorId")
                        .IsRequired()
                        .HasColumnName("MentorID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentGroupId")
                        .IsRequired()
                        .HasColumnName("StudentGroupID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ThemeId")
                        .IsRequired()
                        .HasColumnName("ThemeID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<long>("EvaluatedBy")
                        .HasColumnName("EvaluatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnName("EvaluationDate")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasComment("Types: 0 - Homework, 1 - Visit");

                    b.Property<sbyte>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EvaluatedBy");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mentor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountId")
                        .IsRequired()
                        .HasColumnName("AccountID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("UQ_AccountMentors");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseId")
                        .IsRequired()
                        .HasColumnName("CourseID")
                        .HasColumnType("bigint");

                    b.Property<long?>("MentorId")
                        .IsRequired()
                        .HasColumnName("MentorID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("MentorId");

                    b.HasIndex("CourseId", "MentorId")
                        .IsUnique()
                        .HasName("UQ_MentorAndCourse");

                    b.ToTable("MentorsOfCourses");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfStudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("MentorId")
                        .IsRequired()
                        .HasColumnName("MentorID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentGroupId")
                        .IsRequired()
                        .HasColumnName("StudentGroupID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("MentorId", "StudentGroupId")
                        .IsUnique()
                        .HasName("UQ_MentorAndStudentGroup");

                    b.ToTable("MentorsOfStudentGroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.ScheduledEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventFinish")
                        .HasColumnName("EventFinish")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<long>("EventOccurrenceId")
                        .HasColumnName("EventOccurrenceID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventStart")
                        .HasColumnName("EventStart")
                        .HasColumnType("DATETIME")
                        .HasComment("Use UTC time");

                    b.Property<long?>("LessonId")
                        .HasColumnName("LessonID")
                        .HasColumnType("bigint");

                    b.Property<long?>("MentorId")
                        .IsRequired()
                        .HasColumnName("MentorID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentGroupId")
                        .IsRequired()
                        .HasColumnName("StudentGroupID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ThemeId")
                        .IsRequired()
                        .HasColumnName("ThemeID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EventOccurrenceId");

                    b.HasIndex("LessonId")
                        .IsUnique()
                        .HasName("UQ_LessonScheduledEvents");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ScheduledEvents");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Secretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountId")
                        .IsRequired()
                        .HasColumnName("AccountID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("UQ_AccountSecretaries");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountId")
                        .IsRequired()
                        .HasColumnName("AccountID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("UQ_AccountStudents");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnName("CourseID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinishDate")
                        .IsRequired()
                        .HasColumnName("FinishDate")
                        .HasColumnType("DATE");

                    b.Property<ulong>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("BIT")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnName("StartDate")
                        .HasColumnType("DATE");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CourseId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_NameStudentGroups");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentOfStudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentGroupId")
                        .IsRequired()
                        .HasColumnName("StudentGroupID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .IsRequired()
                        .HasColumnName("StudentID")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId", "StudentGroupId")
                        .IsUnique()
                        .HasName("UQ_StudentAndStudentGroup");

                    b.ToTable("StudentsOfStudentGroups");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_NameThemes");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<long?>("LessonId")
                        .IsRequired()
                        .HasColumnName("LessonID")
                        .HasColumnType("bigint");

                    b.Property<ulong>("Presence")
                        .HasColumnName("Presence")
                        .HasColumnType("BIT");

                    b.Property<long>("StudentId")
                        .HasColumnName("StudentID")
                        .HasColumnType("bigint");

                    b.Property<sbyte?>("StudentMark")
                        .HasColumnName("StudentMark")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Visits");

                    b.HasCheckConstraint("CH_MarkVisits", "StudentMark >= 0 AND StudentMark <= 100");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Account", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Attachment", "Avatar")
                        .WithOne("Account")
                        .HasForeignKey("CharlieBackend.Core.Entities.Account", "AvatarId")
                        .HasConstraintName("FK_AvatarAccounts");
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomework", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Attachment", "Attachment")
                        .WithMany("AttachmentsOfHomework")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_AttachmentOfHomeworks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Homework", "Homework")
                        .WithMany("AttachmentsOfHomework")
                        .HasForeignKey("HomeworkId")
                        .HasConstraintName("FK_HomeworkOfAttachments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomeworkStudent", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Attachment", "Attachment")
                        .WithMany("AttachmentOfHomeworkStudents")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_AttachmentOfHomeworksFromStudents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.HomeworkStudent", "HomeworkStudent")
                        .WithMany("AttachmentOfHomeworkStudents")
                        .HasForeignKey("HomeworkStudentId")
                        .HasConstraintName("FK_HomeworkFromStudentOfAttachments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.AttachmentOfHomeworkStudentHistory", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Attachment", "Attachment")
                        .WithMany("AttachmentOfHomeworkStudentsHistory")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_AttachmentOfHomeworksFromStudentsHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.HomeworkStudentHistory", "HomeworkStudentHistory")
                        .WithMany("AttachmentOfHomeworkStudentsHistory")
                        .HasForeignKey("HomeworkStudentHistoryId")
                        .HasConstraintName("FK_HomeworkFromStudentHistoryOfAttachments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.EventOccurrence", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "StudentGroup")
                        .WithMany("EventOccurances")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("FK_StudentGroupEventOccurrences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Homework", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "Account")
                        .WithMany("Homeworks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AccountOfHomework")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Lesson", "Lesson")
                        .WithMany("Homeworks")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_LessonHomeworks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.HomeworkStudent", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Homework", "Homework")
                        .WithMany("HomeworkStudents")
                        .HasForeignKey("HomeworkId")
                        .HasConstraintName("FK_HomeworkOfStudents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Mark", "Mark")
                        .WithOne("HomeworkStudent")
                        .HasForeignKey("CharlieBackend.Core.Entities.HomeworkStudent", "MarkId")
                        .HasConstraintName("FK_MarkOfHomeworkFromStudent");

                    b.HasOne("CharlieBackend.Core.Entities.Student", "Student")
                        .WithMany("HomeworkStudents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentOfHomeworks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.HomeworkStudentHistory", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.HomeworkStudent", "HomeworkStudent")
                        .WithMany("HomeworkStudentsHistory")
                        .HasForeignKey("HomeworkStudentId")
                        .HasConstraintName("FK_HomeworkStudentOfHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Mark", "Mark")
                        .WithOne("HomeworkStudentHistory")
                        .HasForeignKey("CharlieBackend.Core.Entities.HomeworkStudentHistory", "MarkId")
                        .HasConstraintName("FK_MarkOfHitory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Lesson", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "Mentor")
                        .WithMany("Lesson")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK_MentorLessons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "StudentGroup")
                        .WithMany("Lesson")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("FK_StudentGroupLessons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Theme", "Theme")
                        .WithMany("Lessons")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_ThemeLessons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mark", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "Account")
                        .WithMany("Marks")
                        .HasForeignKey("EvaluatedBy")
                        .HasConstraintName("FK_AccountOfMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Mentor", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "Account")
                        .WithMany("Mentors")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountMentors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfCourse", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Course", "Course")
                        .WithMany("MentorsOfCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseOfMentors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorsOfCourses")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK_MentorOfCourses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.MentorOfStudentGroup", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorsOfStudentGroups")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK_MentorOfStudentGroups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "StudentGroup")
                        .WithMany("MentorsOfStudentGroups")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("FK_StudentGroupOfMentors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.ScheduledEvent", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.EventOccurrence", "EventOccurrence")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("EventOccurrenceId")
                        .HasConstraintName("FK_EventOccurrenceScheduledEvents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Lesson", "Lesson")
                        .WithOne("ScheduledEvent")
                        .HasForeignKey("CharlieBackend.Core.Entities.ScheduledEvent", "LessonId")
                        .HasConstraintName("FK_LessonScheduledEvents");

                    b.HasOne("CharlieBackend.Core.Entities.Mentor", "Mentor")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK_MentorScheduledEvents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "StudentGroup")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("FK_StudentGroupScheduledEvents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Theme", "Theme")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK_ThemeScheduledEvents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Secretary", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "Account")
                        .WithMany("Secretaries")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountSecretaries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Student", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountStudents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentGroup", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Course", "Course")
                        .WithMany("StudentGroup")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseStudentGroups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.StudentOfStudentGroup", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.StudentGroup", "StudentGroup")
                        .WithMany("StudentsOfStudentGroups")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("FK_StudentGroupOfStudents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Student", "Student")
                        .WithMany("StudentsOfStudentGroups")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentOfStudentGroups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharlieBackend.Core.Entities.Visit", b =>
                {
                    b.HasOne("CharlieBackend.Core.Entities.Lesson", "Lesson")
                        .WithMany("Visits")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_LessonVisits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharlieBackend.Core.Entities.Student", "Student")
                        .WithMany("Visits")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentVisits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
