@using CharlieBackend.Panel.Models.Calendar
@model CalendarViewModel

@{
    Layout = "_Layout";
}

@section Styles {
    <link href="~/css/calendar.css" rel="stylesheet" type="text/css" />
}

@section Scripts{
    <script src="~/js/calendar.js"></script>
}

@if (!User.IsInRole("Student"))
{
    <div class="fixed-bottom ml-4" style="left:90%; right:50%; bottom:8%;">
        <div class="dropleft">
            <button type="button" class="btn btn-lg btn-success btn-circle " data-toggle="dropdown">
                <i class="fas fa-plus"></i>
            </button>
            <div class="dropdown-menu ">
                <a class="dropdown-item"
                   asp-action="CreateEventOccurrence" asp-controller="EventOccurrence">
                    <i class="fas fa-plus"></i>
                    <span>Create event occurrence</span>
                </a>
                <a class="dropdown-item"
                   asp-action="CreateSingleEvent" asp-controller="EventOccurrence">
                    <i class="fas fa-plus"></i>
                    <span>Create single event</span>
                </a>
            </div>
        </div>
    </div>
}

<div id="content-wrapper" class="d-flex flex-column">
    <div id="content">
        <div class="container-fluid">
            <form class="col" method="post" action="/Calendar/GetCalendar">
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <div class="row">
                            <h6 class="m-0 font-weight-bold text-primary col-10">Calendar</h6>

                            <select id="weekFormat" class="custom-select col" onchange="ChangeWeekFormat()" name="displayType" asp-for="DisplayType" asp-items="@Html.GetEnumSelectList(typeof(CalendarDisplayType))">
                            </select>
                        </div>
                    </div>

                    <div class="card-header py-3">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <button class="btn btn-outline-secondary" type="submit">Update</button>
                            </div>

                            <select class="custom-select" name="GroupId" id="groupSelect" aria-label="Example select with button addon">
                                @if (Model.ScheduledEventFilter.GroupID.HasValue)
                                {
                                    <option value="null">-Group-</option>
                                    <option value="@Model.ScheduledEventFilter.GroupID.Value" selected>Group @Model.StudentGroups.First(x => x.Id == Model.ScheduledEventFilter.GroupID.Value).Name.ToString()</option>

                                    @foreach (var group in Model.StudentGroups.Where(x => x.Id != Model.ScheduledEventFilter.GroupID.Value))
                                    {
                                        <option value="@group.Id">Group @group.Name.ToString()</option>
                                    }
                                }
                                else
                                {
                                    <option value="null" selected>-Group-</option>

                                    @foreach (var group in Model.StudentGroups)
                                    {
                                        <option value="@group.Id">Group @group.Name.ToString()</option>
                                    }
                                }
                            </select>

                            <select class="custom-select" name="ThemeID" id="themeSelect" aria-label="Example select with button addon">
                                @if (Model.ScheduledEventFilter.ThemeID.HasValue)
                                {
                                    <option value="null">-Theme-</option>
                                    <option value="@Model.ScheduledEventFilter.ThemeID.Value" selected>Theme @Model.Themes.First(x => x.Id == Model.ScheduledEventFilter.ThemeID.Value).Name</option>

                                    @foreach (var theme in Model.Themes.Where(x => x.Id != Model.ScheduledEventFilter.ThemeID.Value))
                                    {
                                        <option value="@theme.Id">Theme @theme.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="null" selected>-Theme-</option>

                                    @foreach (var theme in Model.Themes)
                                    {
                                        <option value="@theme.Id">Theme @theme.Name</option>
                                    }
                                }
                            </select>

                            <select class="custom-select" name="CourseID" id="courseSelect" aria-label="Example select with button addon">
                                @if (Model.ScheduledEventFilter.CourseID.HasValue)
                                {
                                    <option value="null">-Course-</option>
                                    <option value="@Model.ScheduledEventFilter.CourseID.Value" selected>Course @Model.Courses.First(x => x.Id == Model.ScheduledEventFilter.CourseID.Value).Name</option>

                                    @foreach (var course in Model.Courses.Where(x => x.Id != Model.ScheduledEventFilter.CourseID.Value))
                                    {
                                        <option value="@course.Id">Course @course.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="null" selected>-Course-</option>

                                    @foreach (var course in Model.Courses)
                                    {
                                        <option value="@course.Id">Course @course.Name</option>
                                    }
                                }
                            </select>

                            <select class="custom-select" name="MentorID" id="mentorSelect" aria-label="Example select with button addon">
                                @if (Model.ScheduledEventFilter.MentorID.HasValue)
                                {
                                    <option value="null">-Mentor-</option>
                                    <option value="@Model.ScheduledEventFilter.MentorID.Value" selected>
                                        @{
                                            var mentorFiltered = Model.Mentors.First(x => x.Id == Model.ScheduledEventFilter.MentorID.Value);
                                        }
                                        Mentor @(mentorFiltered.FirstName+" "+ mentorFiltered.LastName)
                                    </option>

                                    @foreach (var mentor in Model.Mentors.Where(x => x.Id != Model.ScheduledEventFilter.MentorID.Value))
                                    {
                                        <option value="@mentor.Id">Mentor @($"{mentor.FirstName} {mentor.LastName}")</option>
                                    }
                                }
                                else
                                {
                                    <option value="null" selected>-Mentor-</option>

                                    @foreach (var mentor in Model.Mentors)
                                    {
                                        <option value="@mentor.Id">Mentor @($"{mentor.FirstName} {mentor.LastName}")</option>
                                    }
                                }
                            </select>

                            @if (User.IsInRole("Student"))
                            {
                                <select disabled class="custom-select" name="StudentAccountID" id="accountSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.StudentAccountID.HasValue)
                                    {
                                        <option value="null">-Student-</option>
                                        <option value="@Model.ScheduledEventFilter.StudentAccountID.Value" selected>
                                            @{
                                                var studentFiltered = Model.Students.First(x => x.Id == Model.ScheduledEventFilter.StudentAccountID.Value);
                                            }
                                            Student @($"{studentFiltered.FirstName} {studentFiltered.LastName}")
                                        </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <select class="custom-select" name="StudentAccountID" id="accountSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.StudentAccountID.HasValue)
                                    {
                                        <option value="null">-Student-</option>
                                        <option value="@Model.ScheduledEventFilter.StudentAccountID.Value" selected>
                                            @{
                                                var studentFiltered = Model.Students.First(x => x.Id == Model.ScheduledEventFilter.StudentAccountID.Value);
                                            }
                                            Student @($"{studentFiltered.FirstName} {studentFiltered.LastName}")
                                        </option>

                                        @foreach (var student in Model.Students.Where(x => x.Id != Model.ScheduledEventFilter.StudentAccountID.Value))
                                        {
                                            <option value="@student.Id">Student @($"{student.FirstName} {student.LastName}")</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Student-</option>
                                        @foreach (var student in Model.Students)
                                        {
                                <option value="@student.Id">Student @($"{student.FirstName} {student.LastName}")</option>
                                        }
                                    }
                                </select>
                            }
                        </div>

                        <div class="form-group row">
                            <div class="col-6">
                                <input class="form-control" name="StartDate" type="datetime-local" value="@Model.ScheduledEventFilter.StartDate.Value.ToString("yyyy-MM-dd HH:mm").Replace(' ','T')" id="startDate">
                            </div>

                            <div class="col-6">
                                <input class="form-control" name="FinishDate" type="datetime-local" value="@Model.ScheduledEventFilter.FinishDate.Value.ToString("yyyy-MM-dd HH:mm").Replace(' ','T')" id="finishDate">
                            </div>
                        </div>
                    </div>

                    @{await Html.RenderPartialAsync("CalendarBody");}

                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="seeSchedulEvent" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <label for="seTime">Time:</label>
                <input id="seTime" class="modalTextInput form-control" value="" disabled />

                <label for="seTheme">Theme:</label>
                <input id="seTheme" class="modalTextInput form-control" value="" disabled />

                <label for="seGroup">Group:</label>
                <input id="seGroup" class="modalTextInput form-control" value="" disabled />

                <label for="seMentor">Mentor:</label>
                <input id="seMentor" class="modalTextInput form-control" value="" disabled />
            </div>

            @if (!User.IsInRole("Student"))
            {
                <div class="modal-footer">
                    <a id="seEventOccurrenceId" class="btn btn-primary" title="You want to edit a series of events" href="">Edit schedule event</a>
                    <a id="seSingleEventId" class="btn btn-primary" title="You only want to edit one event" href="">Edit only this event</a>
                    <a id="deleteEventOccurrence" class="btn btn-primary" title="You want to delete a series of eventst" href="">Delete</a>
                </div>
            }
        </div>
    </div>
</div>
