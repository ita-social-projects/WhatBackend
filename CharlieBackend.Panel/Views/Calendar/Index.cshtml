@model CharlieBackend.Panel.Models.Calendar.CalendarViewModel
@{
    Layout = "_Layout";
}
<style type="text/css">
    .out-of-range {
        background: #edeff1;
    }
    .events button {
        margin-top: 2px;
        width: 100%;
    }
    .events {
        margin-bottom: 3px;
    }
    .badge {
        display: block;
        width: fit-content;
        margin-bottom: 2px;
        margin-top: 12px;
    }
    div.head div {
        text-align: center;
    }
    .col-1:first-child, .col-2 {
        border-right: 0.5px solid;
    }
    .col-2, .col-1 {
        border-bottom: 0.5px solid grey;
        min-height: 100px;
    }
</style>
@section Scripts{
    <script type="text/javascript">
        var seGroupdID = null;
        var seMentorId = null;
        var seLessonId = null;
        var seThemeId = null;
        $(document).on("click", ".btn-event", function (e) {
            e.preventDefault();
            var _self = $(this);
            seGroupdID = _self.attr("segroupdid");
            seMentorId = _self.attr("sementorid");
            seLessonId = _self.attr("selessonid");
            seThemeId = _self.attr("sethemeid");
            $("#seGroupdID").val(seGroupdID);
            $("#seMentorId").val(seMentorId);
            $("#seLessonId").val(seLessonId);
            $("#seThemeId").val(seThemeId);
        });
    </script>
}
    <div id="content-wrapper" class="d-flex flex-column">
        <div id="content">
            <div class="container-fluid">
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">Calendar</h6>
                    </div>
                    <div class="card-header py-3">
                        <form method="post" action="/Calendar/GetCalendar">
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <button class="btn btn-outline-secondary" type="submit">Update</button>
                                </div>
                                <select class="custom-select" name="GroupID" id="groupSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.GroupID.HasValue)
                                    {
                                        <option value="null">-Group-</option>
                                        <option value="@Model.ScheduledEventFilter.GroupID.Value" selected>Group @Model.StudentGroups.First(x => x.Id == Model.ScheduledEventFilter.GroupID.Value).FinishDate.ToString()</option>

                                        @foreach (var group in Model.StudentGroups.Where(x => x.Id != Model.ScheduledEventFilter.GroupID.Value))
                                        {
                                            <option value="@group.Id">Group @group.FinishDate.ToString()</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Group-</option>

                                        @foreach (var group in Model.StudentGroups)
                                        {
                                            <option value="@group.Id">Group @group.FinishDate.ToString()</option>
                                        }
                                    }
                                </select>
                                <select class="custom-select" name="ThemeID" id="themeSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.ThemeID.HasValue)
                                    {
                                        <option value="null">-Theme-</option>
                                        <option value="@Model.ScheduledEventFilter.ThemeID.Value" selected>Theme @Model.Themes.First(x => x.Id == Model.ScheduledEventFilter.ThemeID.Value).Name</option>

                                        @foreach (var theme in Model.Themes.Where(x => x.Id != Model.ScheduledEventFilter.ThemeID.Value))
                                        {
                                            <option value="@theme.Id">Theme @theme.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Theme-</option>

                                        @foreach (var theme in Model.Themes)
                                        {
                                            <option value="@theme.Id">Theme @theme.Name</option>
                                        }
                                    }
                                </select>
                                <select class="custom-select" name="CourseID" id="courseSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.CourseID.HasValue)
                                    {
                                        <option value="null">-Course-</option>
                                        <option value="@Model.ScheduledEventFilter.CourseID.Value" selected>Course @Model.Courses.First(x => x.Id == Model.ScheduledEventFilter.CourseID.Value).Name</option>

                                        @foreach (var course in Model.Courses.Where(x => x.Id != Model.ScheduledEventFilter.CourseID.Value))
                                        {
                                            <option value="@course.Id">Course @course.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Course-</option>

                                        @foreach (var course in Model.Courses)
                                        {
                                            <option value="@course.Id">Course @course.Name</option>
                                        }
                                    }
                                </select>
                                <select class="custom-select" name="MentorID" id="mentorSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.MentorID.HasValue)
                                    {
                                        <option value="null">-Mentor-</option>
                                        <option value="@Model.ScheduledEventFilter.MentorID.Value" selected>
                                            @{
                                                var mentorFiltered = Model.Mentors.First(x => x.Id == Model.ScheduledEventFilter.MentorID.Value);
                                            }
                                            Mentor @(mentorFiltered.FirstName+" "+ mentorFiltered.LastName)
                                        </option>

                                        @foreach (var mentor in Model.Mentors.Where(x => x.Id != Model.ScheduledEventFilter.MentorID.Value))
                                        {
                                            <option value="@mentor.Id">Mentor @(mentor.FirstName+" "+ mentor.LastName)</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Mentor-</option>

                                        @foreach (var mentor in Model.Mentors)
                                        {
                                            <option value="@mentor.Id">Mentor @(mentor.FirstName+" "+mentor.LastName)</option>
                                        }
                                    }
                                </select>
                                <select class="custom-select" name="StudentAccountID" id="accountSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.StudentAccountID.HasValue)
                                    {
                                        <option value="null">-Account-</option>
                                        <option value="@Model.ScheduledEventFilter.StudentAccountID.Value" selected>
                                            @{
                                                var studentFiltered = Model.Students.First(x => x.Id == Model.ScheduledEventFilter.StudentAccountID.Value);
                                            }
                                            Account @(studentFiltered.FirstName+" "+ studentFiltered.LastName)
                                        </option>

                                        @foreach (var student in Model.Students.Where(x => x.Id != Model.ScheduledEventFilter.StudentAccountID.Value))
                                        {
                                            <option value="@student.Id">Account @(student.FirstName+" "+ student.LastName)</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Account-</option>
                                        @foreach (var student in Model.Students)
                                        {
                                            <option value="@student.Id">Account @(student.FirstName+" "+ student.LastName)</option>
                                        }
                                    }
                                </select>
                                <select class="custom-select" name="EventOccurrenceID" id="occurenceSelect" aria-label="Example select with button addon">
                                    @if (Model.ScheduledEventFilter.EventOccurrenceID.HasValue)
                                    {
                                        <option value="null">-Occurrence-</option>
                                        <option value="@Model.ScheduledEventFilter.EventOccurrenceID.Value" selected>
                                            @{
                                                var occurenceFiltered = Model.EventOccurences.First(x => x.Id == Model.ScheduledEventFilter.EventOccurrenceID.Value);
                                            }
                                            @(occurenceFiltered.EventStart.Date+" - "+ occurenceFiltered.EventFinish.Date)
                                        </option>

                                        @foreach (var occurence in Model.EventOccurences.Where(x => x.Id != Model.ScheduledEventFilter.EventOccurrenceID.Value))
                                        {
                                            <option value="@occurence.Id">@(occurence.EventStart.Date+" - "+occurence.EventFinish.Date)</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="null" selected>-Occurrence-</option>
                                        @foreach (var occurence in Model.EventOccurences)
                                        {
                                            <option value="@occurence.Id">@(occurence.EventStart.Date+" - "+occurence.EventFinish.Date)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-group row">
                                <div class="col-6">
                                    <input class="form-control" name="StartDate" type="datetime-local" value="@Model.ScheduledEventFilter.StartDate.Value.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ','T')" id="startDate">
                                </div>
                                <div class="col-6">
                                    <input class="form-control" name="FinishDate" type="datetime-local" value="@Model.ScheduledEventFilter.FinishDate.Value.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ','T')" id="finishDate">
                                </div>
                            </div>
                        </form>
                    </div>

                    @{await Html.RenderPartialAsync("CalendarBody");}

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="seeSchedulEvent" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <label for="seGroupdID">GroupdID:</label>
                    <input id="seGroupdID" class="modalTextInput form-control" value="" />

                    <label for="seMentorId">MentorId:</label>
                    <input id="seMentorId" class="modalTextInput form-control" value="" />

                    <label for="seLessonId">LessonId:</label>
                    <input id="seLessonId" class="modalTextInput form-control" value="" />

                    <label for="seThemeId">ThemeId:</label>
                    <input id="seThemeId" class="modalTextInput form-control" value="" />

                </div>
                <div class="modal-footer">
                    <a class="btn btn-primary" id="editSe" href="">Edit schedule event</a>
                </div>
            </div>
        </div>
    </div>
